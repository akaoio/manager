name: Stacker CI/CD - Battle Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  STACKER_TEST_MODE: 'true'
  STACKER_DEBUG: 'false'

jobs:
  # Multi-shell compatibility testing
  test-shell-compatibility:
    name: Shell Compatibility (${{ matrix.shell }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shell: ['/bin/sh', '/bin/bash', '/bin/dash']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shell compatibility
        run: |
          # Install dash if not present
          sudo apt-get update
          sudo apt-get install -y dash
          
          # Verify shell availability
          echo "Testing shell: ${{ matrix.shell }}"
          ${{ matrix.shell }} --version || echo "Shell version not available"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install dependencies
          npm ci || npm install

      - name: Build TypeScript components
        run: |
          npm run build
          
          # Verify build artifacts
          ls -la dist/
          test -f dist/index.js
          test -f dist/index.cjs

      - name: Run shell-specific tests
        shell: bash
        run: |
          # Run shell tests directly
          ${{ matrix.shell }} ./stacker.sh version
          ${{ matrix.shell }} ./stacker.sh help
          
          # Run test suite with specific shell
          ${{ matrix.shell }} ./tests/run-tests.sh
        env:
          TERM: xterm-256color

      - name: Upload shell test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: shell-test-results-${{ matrix.shell }}
          path: |
            tests/results/
            logs/
          retention-days: 7

  # Core Battle framework testing
  test-battle-integration:
    name: Battle Framework Integration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci || npm install
          
          # Verify builder tool
          npx akao-build --version || echo "Builder not yet available"

      - name: Build project
        run: |
          npm run build
          
          # Verify hybrid architecture
          test -f dist/index.js    # TypeScript build
          test -f stacker.sh       # Shell interface
          test -x stacker.sh       # Shell executable

      - name: Run full test suite
        run: |
          # Create test result directories
          mkdir -p tests/results tests/results/screenshots
          
          # Run comprehensive testing
          npm run test:ci
        env:
          TERM: xterm-256color
          CI: true

      - name: Verify test outputs
        run: |
          # Display test summary
          echo "=== Test Summary ==="
          echo "Tests completed successfully"

      - name: Upload Battle test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: battle-test-results
          path: |
            tests/results/
            logs/
          retention-days: 30

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: battle-test-screenshots
          path: tests/results/screenshots/
          retention-days: 14

  # Hybrid architecture validation
  test-hybrid-architecture:
    name: Hybrid Architecture Validation
    runs-on: ubuntu-latest
    needs: [test-battle-integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test TypeScript API interface
        run: |
          echo "=== Testing TypeScript API ==="
          node -e "
            import('./dist/index.js').then(stacker => {
              console.log('‚úÖ TypeScript module loads successfully');
              return stacker.stacker.version();
            }).then(version => {
              console.log('‚úÖ Version API works:', version.split('\\n')[0]);
            }).catch(err => {
              console.log('‚ùå TypeScript API failed:', err.message);
              process.exit(1);
            });
          "

      - name: Test Shell interface
        run: |
          echo "=== Testing Shell Interface ==="
          if ./stacker.sh version; then
            echo "‚úÖ Shell interface works"
          else
            echo "‚ùå Shell interface failed"
            exit 1
          fi

      - name: Test interface consistency
        run: |
          echo "=== Testing Interface Consistency ==="
          
          # Get version from both interfaces
          SHELL_VERSION=$(./stacker.sh version | head -1)
          TS_VERSION=$(node -e "import('./dist/index.js').then(m => m.stacker.version().then(v => console.log(v.split('\\n')[0])))" 2>/dev/null)
          
          echo "Shell version: $SHELL_VERSION"
          echo "TypeScript version: $TS_VERSION"
          
          if echo "$SHELL_VERSION" | grep -q "0.0.2" && echo "$TS_VERSION" | grep -q "0.0.2"; then
            echo "‚úÖ Version consistency verified"
          else
            echo "‚ùå Version inconsistency detected"
            exit 1
          fi

      - name: Run hybrid integration tests
        run: |
          # Run Battle integration tests specifically
          npx battle test --pattern="tests/integration/**/*.test.{ts,js,sh}" --verbose

  # Package and publish readiness
  test-package:
    name: Package Validation
    runs-on: ubuntu-latest
    needs: [test-shell-compatibility, test-battle-integration, test-hybrid-architecture]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for packaging
        run: |
          npm run build
          npm run docs  # Generate documentation

      - name: Test package creation
        run: |
          # Create package without publishing
          npm pack
          
          # Verify package contains required files
          tar -tzf akaoio-stacker-*.tgz | grep -E "(dist/|stacker\.sh|modules/)" || {
            echo "‚ùå Package missing required files"
            exit 1
          }
          
          echo "‚úÖ Package validation successful"

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: stacker-package
          path: akaoio-stacker-*.tgz
          retention-days: 7

  # Final validation and summary
  validate-ci-success:
    name: CI/CD Validation Complete
    runs-on: ubuntu-latest
    needs: [test-shell-compatibility, test-battle-integration, test-hybrid-architecture, test-package]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: Generate CI summary
        run: |
          echo "# Stacker CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          if [ "${{ needs.test-shell-compatibility.result }}" = "success" ]; then
            echo "‚úÖ Shell Compatibility: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Shell Compatibility: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-battle-integration.result }}" = "success" ]; then
            echo "‚úÖ Battle Integration: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Battle Integration: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-hybrid-architecture.result }}" = "success" ]; then
            echo "‚úÖ Hybrid Architecture: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Hybrid Architecture: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-package.result }}" = "success" ]; then
            echo "‚úÖ Package Validation: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Package Validation: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Battle Framework Integration" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Battle configuration integrated" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ PTY terminal testing enabled" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Multi-shell compatibility validated" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Hybrid architecture tested" >> $GITHUB_STEP_SUMMARY

      - name: Report CI status
        run: |
          if [ "${{ needs.test-shell-compatibility.result }}" = "success" ] && \
             [ "${{ needs.test-battle-integration.result }}" = "success" ] && \
             [ "${{ needs.test-hybrid-architecture.result }}" = "success" ] && \
             [ "${{ needs.test-package.result }}" = "success" ]; then
            echo "üéâ All CI/CD checks passed! Stacker is ready for deployment."
          else
            echo "‚ö†Ô∏è Some CI/CD checks failed. Review the results above."
            exit 1
          fi
{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @akaoio/stacker - Universal Shell Framework TypeScript Interface\n * Version: 0.0.2 (Honest development versioning)\n * \n * Hybrid architecture: Shell foundation + TypeScript API\n * Provides both shell and Node.js interfaces for maximum compatibility\n */\n\nimport { execSync, spawn, ChildProcess } from \"child_process\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport interface StackerConfig {\n  name: string;\n  description: string;\n  repository?: string;\n  executable: string;\n  version: string;\n  configDir: string;\n  dataDir: string;\n  stackerPath: string;\n}\n\nexport interface StackerInstallOptions {\n  systemd?: boolean;\n  cron?: boolean;\n  manual?: boolean;\n  interval?: number;\n  autoUpdate?: boolean;\n}\n\nexport interface StackerModuleInfo {\n  name: string;\n  loaded: boolean;\n  dependencies: string[];\n  path: string;\n  description?: string;\n}\n\n/**\n * Main Stacker Framework TypeScript Interface\n * Bridges shell framework with Node.js ecosystem\n */\nexport class Stacker {\n  private stackerPath: string;\n  private initialized: boolean = false;\n  private loadedModules: string[] = [];\n\n  constructor(options: { stackerPath?: string } = {}) {\n    this.stackerPath = options.stackerPath || this.findStackerPath();\n    \n    if (!this.stackerPath) {\n      throw new Error(\"Stacker framework not found. Install with: npm install @akaoio/stacker\");\n    }\n  }\n\n  /**\n   * Find Stacker installation path\n   */\n  private findStackerPath(): string {\n    const possiblePaths = [\n      // Current package\n      path.join(__dirname, \"..\", \"stacker.sh\"),\n      // Development\n      path.join(process.cwd(), \"stacker.sh\"),\n      // Global installation\n      path.join(process.env.HOME || \"\", \".local\", \"bin\", \"stacker\"),\n      // System installation\n      `${process.env.STACKER_PREFIX || '/usr/local'}/bin/stacker`\n    ];\n\n    for (const stackerPath of possiblePaths) {\n      if (fs.existsSync(stackerPath)) {\n        return stackerPath;\n      }\n    }\n\n    return \"\";\n  }\n\n  /**\n   * Initialize Stacker for a project\n   */\n  async init(config: {\n    name: string;\n    repository?: string;\n    executable?: string;\n    description?: string;\n  }): Promise<void> {\n    if (this.initialized) return;\n\n    const script = `\n      \"${this.stackerPath}\" init \\\\\n        --name=\"${config.name}\" \\\\\n        ${config.repository ? `--repo=\"${config.repository}\"` : \"\"} \\\\\n        ${config.executable ? `--script=\"${config.executable}\"` : \"\"} \\\\\n        ${config.description ? `--description=\"${config.description}\"` : \"\"}\n    `;\n\n    try {\n      execSync(script, { stdio: \"inherit\" });\n      this.initialized = true;\n    } catch (error) {\n      throw new Error(`Failed to initialize Stacker: ${error}`);\n    }\n  }\n\n  /**\n   * Install application using Stacker\n   */\n  async install(options: StackerInstallOptions = {}): Promise<void> {\n    const args = [];\n    \n    if (options.systemd) args.push(\"--systemd\");\n    if (options.cron) args.push(\"--cron\");\n    if (options.manual) args.push(\"--manual\");\n    if (options.interval) args.push(`--interval=${options.interval}`);\n    if (options.autoUpdate) args.push(\"--auto-update\");\n\n    const script = `\"${this.stackerPath}\" install ${args.join(\" \")}`;\n\n    try {\n      execSync(script, { stdio: \"inherit\" });\n    } catch (error) {\n      throw new Error(`Installation failed: ${error}`);\n    }\n  }\n\n  /**\n   * Control services\n   */\n  async service(action: \"start\" | \"stop\" | \"restart\" | \"status\" | \"enable\" | \"disable\"): Promise<string> {\n    const script = `\"${this.stackerPath}\" service ${action}`;\n\n    try {\n      return execSync(script, { encoding: \"utf8\" });\n    } catch (error) {\n      throw new Error(`Service ${action} failed: ${error}`);\n    }\n  }\n\n  /**\n   * Update application\n   */\n  async update(options: { check?: boolean; force?: boolean } = {}): Promise<void> {\n    const args = [];\n    \n    if (options.check) args.push(\"--check\");\n    if (options.force) args.push(\"--force\");\n\n    const script = `\"${this.stackerPath}\" update ${args.join(\" \")}`;\n\n    try {\n      execSync(script, { stdio: \"inherit\" });\n    } catch (error) {\n      throw new Error(`Update failed: ${error}`);\n    }\n  }\n\n  /**\n   * Get configuration value\n   */\n  async getConfig(key: string): Promise<string> {\n    const script = `\"${this.stackerPath}\" config get \"${key}\"`;\n\n    try {\n      return execSync(script, { encoding: \"utf8\" }).trim();\n    } catch (error) {\n      throw new Error(`Failed to get config ${key}: ${error}`);\n    }\n  }\n\n  /**\n   * Set configuration value\n   */\n  async setConfig(key: string, value: string): Promise<void> {\n    const script = `\"${this.stackerPath}\" config set \"${key}\" \"${value}\"`;\n\n    try {\n      execSync(script, { stdio: \"inherit\" });\n    } catch (error) {\n      throw new Error(`Failed to set config ${key}: ${error}`);\n    }\n  }\n\n  /**\n   * Health check\n   */\n  async health(verbose: boolean = false): Promise<any> {\n    const script = `\"${this.stackerPath}\" health ${verbose ? \"--verbose\" : \"\"}`;\n\n    try {\n      const output = execSync(script, { encoding: \"utf8\" });\n      return {\n        healthy: true,\n        output: output.trim()\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        error: error\n      };\n    }\n  }\n\n  /**\n   * Get version info\n   */\n  async version(): Promise<string> {\n    const script = `\"${this.stackerPath}\" version`;\n\n    try {\n      return execSync(script, { encoding: \"utf8\" }).trim();\n    } catch (error) {\n      return \"0.0.2\";\n    }\n  }\n\n  /**\n   * Execute raw Stacker command\n   */\n  async exec(command: string, args: string[] = []): Promise<string> {\n    const script = `\"${this.stackerPath}\" ${command} ${args.join(\" \")}`;\n\n    try {\n      return execSync(script, { encoding: \"utf8\" });\n    } catch (error) {\n      throw new Error(`Command failed: ${script} - ${error}`);\n    }\n  }\n\n  /**\n   * Package management\n   */\n  async addPackage(packageUrl: string, scope: \"local\" | \"user\" | \"system\" = \"local\"): Promise<void> {\n    const script = `\"${this.stackerPath}\" add \"${packageUrl}\" --${scope}`;\n\n    try {\n      execSync(script, { stdio: \"inherit\" });\n    } catch (error) {\n      throw new Error(`Failed to add package: ${error}`);\n    }\n  }\n\n  /**\n   * Remove package\n   */\n  async removePackage(packageName: string, scope: \"local\" | \"user\" | \"system\" = \"local\"): Promise<void> {\n    const script = `\"${this.stackerPath}\" remove \"${packageName}\" --${scope}`;\n\n    try {\n      execSync(script, { stdio: \"inherit\" });\n    } catch (error) {\n      throw new Error(`Failed to remove package: ${error}`);\n    }\n  }\n\n  /**\n   * List packages\n   */\n  async listPackages(scope?: \"local\" | \"user\" | \"system\"): Promise<string[]> {\n    const script = `\"${this.stackerPath}\" list ${scope ? `--${scope}` : \"\"}`;\n\n    try {\n      const output = execSync(script, { encoding: \"utf8\" });\n      return output.split(\"\\n\").filter(line => line.trim());\n    } catch (error) {\n      return [];\n    }\n  }\n\n  /**\n   * Search packages\n   */\n  async searchPackages(query: string): Promise<string[]> {\n    const script = `\"${this.stackerPath}\" search \"${query}\"`;\n\n    try {\n      const output = execSync(script, { encoding: \"utf8\" });\n      return output.split(\"\\n\").filter(line => line.trim() && line.includes(\"gh:\"));\n    } catch (error) {\n      return [];\n    }\n  }\n\n  /**\n   * Static helper: Check if Stacker is available\n   */\n  static isAvailable(): boolean {\n    const instance = new Stacker();\n    return Boolean(instance.stackerPath);\n  }\n\n  /**\n   * Static helper: Get Stacker version\n   */\n  static async getVersion(): Promise<string> {\n    if (!this.isAvailable()) return \"not installed\";\n    \n    const instance = new Stacker();\n    return await instance.version();\n  }\n}\n\n/**\n * Default export for convenient importing\n */\nexport default Stacker;\n\n/**\n * Singleton instance for global use\n */\nexport const stacker = new Stacker();\n\n/**\n * Utility functions for common operations\n */\nexport const StackerUtils = {\n  /**\n   * Quick health check\n   */\n  async isHealthy(): Promise<boolean> {\n    try {\n      const result = await stacker.health();\n      return result.healthy;\n    } catch {\n      return false;\n    }\n  },\n\n  /**\n   * Safe initialization with error handling\n   */\n  async safeInit(config: {\n    name: string;\n    repository?: string;\n    executable?: string;\n    description?: string;\n  }): Promise<boolean> {\n    try {\n      await stacker.init(config);\n      return true;\n    } catch (error) {\n      console.warn(\"Stacker initialization failed:\", error);\n      return false;\n    }\n  },\n\n  /**\n   * Install with fallback\n   */\n  async install(options: StackerInstallOptions = {}): Promise<boolean> {\n    try {\n      await stacker.install(options);\n      return true;\n    } catch (error) {\n      console.warn(\"Stacker installation failed:\", error);\n      return false;\n    }\n  }\n};"]}